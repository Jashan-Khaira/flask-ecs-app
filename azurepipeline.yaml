trigger:
  branches:
    include:
      - main

variables:
  - name: imageName
    value: 'flask-microservice'
  - name: imageTag
    value: '$(Build.BuildId)'
  - name: containerRegistry
    value: 'flaskappcontainerregistry.azurecr.io'
  - name: registryName
    value: 'flaskappcontainerregistry'
  - name: resourceGroup
    value: 'flask-microservice-rg'
  - name: containerAppName
    value: 'flask-app'
  - name: containerEnvironment
    value: 'flask-container-environment'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Job'
        steps:
          - checkout: self
            displayName: 'Checkout Code'
          
          - task: Docker@2
            displayName: 'Build and Push Docker image'
            inputs:
              command: 'buildAndPush'
              containerRegistry: 'jk-docker-connection'
              repository: '$(containerRegistry)/$(imageName)'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              tags: '$(imageTag)'
            continueOnError: false
            enabled: true
  
  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: 'Deploy Job'
        steps:
          - task: AzureCLI@2
            displayName: 'Azure Login and ACR Authentication'
            inputs:
              azureSubscription: 'jk-sp-azure'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Login to Azure Container Registry
                az acr login --name $(registryName)
                
                # Verify image exists (corrected query)
                az acr repository show-tags \
                  --name $(registryName) \
                  --repository $(imageName) \
                  --query "contains(@, '$(imageTag)')" \
                  --output tsv
          
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Apps'
            inputs:
              azureSubscription: 'jk-sp-azure'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if container app exists, update or create accordingly
                if az containerapp show --name $(containerAppName) --resource-group $(resourceGroup) &>/dev/null; then
                  echo "Updating existing container app..."
                  az containerapp update \
                    --name $(containerAppName) \
                    --resource-group $(resourceGroup) \
                    --image $(containerRegistry)/$(imageName):$(imageTag)
                else
                  echo "Creating new container app..."
                  az containerapp create \
                    --name $(containerAppName) \
                    --resource-group $(resourceGroup) \
                    --image $(containerRegistry)/$(imageName):$(imageTag) \
                    --environment $(containerEnvironment) \
                    --cpu 0.5 --memory 1Gi \
                    --min-replicas 2 --max-replicas 3 \
                    --ingress 'external' \
                    --target-port 5000
                fi

                # Verify deployment
                az containerapp show \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup)
